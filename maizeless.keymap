/* vim: ft=dts
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define L_QWERTY  0
#define L_COLEMAK 1
#define L_NUMS    2
#define L_FUNC    3
#define L_SPECIAL 4
#define L_VIM     5
#define L_SFT_VIM 6
#define L_VIM_VIS 7

/ {
        keymap {
                compatible = "zmk,keymap";

        l_qwerty {
            bindings = <
// &kp GRAVE  &kp N1  &kp N2  &kp N3  &kp N4  &lt L_SPECIAL N5        &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &lt L_SPECIAL EQUAL
&kp TAB         &kp Q       &kp W          &lt L_SPECIAL E  &kp R       &kp T         &kp Y   &kp U       &lt L_SPECIAL I      &kp O           &kp P           &kp UNDER
&kp BSPC        &kp A       &mt LCTRL S    &mt LGUI D       &mt LALT F  &kp G         &kp H   &mt RALT J  &mt RGUI K           &mt RCTRL L     &kp SEMI        &kp APOS
&mt LSHFT LBKT  &mt LCTRL Z  &lt L_NUMS X  &lt L_SPECIAL C  &lt L_VIM V &mt LALT B    &kp N   &lt L_VIM M &lt L_SPECIAL COMMA  &lt L_NUMS DOT  &mt RCTRL SLASH  &mt RSHFT RBKT
                                           &tog L_NUMS      &kp SPACE   &kp BSPC      &tog L_SPECIAL &kp RSHFT &kp RET
            >;
        };

//         l_colemak {
//             bindings = <
// // &kp GRAVE  &kp N1  &kp N2  &kp N3  &kp N4  &lt L_SPECIAL N5        &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &lt L_SPECIAL EQUAL
// &trans  &kp Q       &kp W          &lt L_SPECIAL F  &kp P        &kp G         &kp J          &kp L       &lt L_SPECIAL U      &kp Y            &kp SEMI        &trans
// &trans  &kp A       &mt LCTRL R     &mt LGUI S       &mt LALT T   &kp D         &kp H          &mt RALT N  &mt RGUI E           &mt RCTRL I       &kp O           &trans
// &trans  &mt LCTRL Z  &lt L_NUMS X   &lt L_SPECIAL C  &lt L_VIM V    &mt LALT B    &kp K          &lt L_VIM M   &lt L_SPECIAL COMMA  &lt L_NUMS DOT   &trans          &trans
//                                    &tog L_NUMS      &kp SPACE V  &kp BSPC      &tog L_SPECIAL &kp RSHFT   &kp RET
//             >;
//         };

//         l_nums {
//                         bindings = <
// // &kp GRAVE &kp F1    &kp F2    &kp F3     &kp F4 &kp F5         &kp F6   &kp F7   &kp F8   &kp F9    &kp F10   &kp F11
// &trans    &kp GRAVE &kp GRAVE &sl L_FUNC &trans &trans   &trans   &kp BSLH &kp BSLH &kp MINUS &kp EQUAL &tog L_NUMS
// &trans    &kp N1    &kp N2    &kp N3     &kp N4 &kp N5   &kp N6   &kp N7   &kp N8   &kp N9    &kp N0    &kp BSLH
// &kp LCTRL &kp LGUI  &kp LALT  &trans     &trans &trans   &kp RALT &kp RGUI &kp RCTRL &kp LBKT  &kp RBKT  &trans
//                                 &trans   &trans &trans   &trans   &trans   &trans
//                         >;
//                 };

//         l_func {
//             bindings = <
//                 // TODO add special functions like locks etc.
// &trans    &trans &trans &trans     &trans   &trans     &trans   &trans   &trans   &trans &trans  &trans
// &kp CAPS  &kp F1 &kp F2 &kp F3     &kp F4   &kp F5     &kp F6   &kp F7   &kp F8   &kp F9 &kp F10 &kp F11
// &trans    &trans &trans &trans     &trans   &trans     &trans   &trans   &trans   &trans &trans  &kp F12
//                         &kp LCTRL  &kp LGUI &kp LALT   &trans   &trans   &trans
//                                      >;
//         };

//         l_special {
//             bindings = <
//    &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
//    &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
//    &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
//                              &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
//                              >;
//         };

//         l_vim {
//     bindings = <
// // &sl LAYER_LOCK &kp DM_RSTP &kp DM_PLY1 &kp DM_PLY2 &kp END &trans        &trans  &trans     &trans     &trans     &kp HOME &trans
// // &tog L_VIM    &trans      &kp LC(RIGHT) &kp LC(V)    &kp END &td TD_VIM_GG  &kp DOWN &kp RIGHT &kp LC(Z)  &kp LC(C)  &kp HOME   &tog L_VIM 
// &trans        &kp END     &kp BSPC      &trans    &trans    &kp LC(X)      &kp LEFT &trans    &kp LC(RIGHT) &tog L_VIM &newline_after &trans
// &mo L_SFT_VIM &trans      &kp DEL       &kp LC(X) &tog L_VIM_VIS &kp LC(LEFT) &kp UP &trans &trans &trans &kp LC(E) &mo L_SFT_VIM
//                                           &trans     &trans    &mo L_SFT_VIM   &trans   &trans    &trans
//                         >;
//                 };

//         l_sft_vim {
//                         bindings = <
// // &trans  &trans  &trans  &trans  &kp END &trans        &kp HOME &trans  &trans  &trans  &trans  &trans
// &trans   &trans  &trans  &paste_up  &kp LS(END) &kp LC(END)   &trans   &trans  &trans  &yank_eol &trans  &trans
// &trans   &kp END &trans  &trans  &trans       &cut_eol   &trans   &trans  &trans  &kp HOME     &newline_up &trans
// &trans   &trans  &kp BSPC &trans &select_line &trans      &trans   &trans  &trans  &trans       &trans         &trans
//                                 &trans  &trans  &trans        &trans   &trans  &trans
//                         >;
//                 };

//         l_vim_vis {
//                         bindings = <
// // &tog L_VIM_VIS &trans  &trans  &trans  &kp LS(END) &trans        &kp LS(HOME) &trans  &trans  &trans  &kp LS(HOME) &trans
// // &tog L_VIM_VIS          &trans  &kp LC(LS(RIGHT)) &trans  &kp PASTE_REPLACE &td TD_BOF_EOF   &kp LS(DOWN) &kp LS(RIGHT) &kp LC(Z) &kp LC(C) &trans  &trans
// &trans          &trans  &trans            &trans  &trans            &kp LC(X)        &kp LS(LEFT) &trans        &kp LC(LS(RIGHT)) &trans  &trans  &trans
// &trans          &trans  &kp BSPC          &trans  &tog L_VIM_VIS    &kp LC(LS(LEFT)) &kp LS(UP)   &trans        &kp LS(TAB)       &kp TAB &trans  &trans
//                                           &trans  &trans  &trans        &trans   &trans  &trans
//                         >;
//                 };

    };


    macros {
        newline_after: newline_after {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            bindings = <&kp END &kp ENTER>;
        };

        paste_up: paste_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            bindings = <&kp HOME &kp LC(V) &kp ENTER>;
        };

        cut_eol: cut_eol {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            bindings = <&kp LS(END) &kp LC(X)>;
        };

        select_line: select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            bindings = <&kp HOME &kp LS(END)>;
        };

        yank_eol: yank_eol {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            bindings = <&kp LS(END) &kp LC(C)>;
        };

        newline_up: newline_up {
            compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>;
            wait-ms = <100>;
            bindings = <&kp HOME &kp ENTER &kp LEFT>;
        };

        paste_replace: paste_replace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;  
            wait-ms = <100>;
            bindings = <&kp DEL &kp LC(V)>;
        };

    };
};
